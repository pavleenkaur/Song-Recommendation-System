{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Reading the Train and Test Data\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "train_data = pd.read_csv('train.csv')\n",
    "test_data = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Splitting ts_listen date to listened_date and listened_time\n",
    "train_data = train_data.join(train_data['ts_listen'].str.split(' ', 1, expand=True).rename(columns={0:'listened_date', 1:'listened_time'}))\n",
    "test_data = test_data.join(test_data['ts_listen'].str.split(' ', 1, expand=True).rename(columns={0:'listened_date', 1:'listened_time'}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Formatting release date\n",
    "from datetime import datetime\n",
    "train_date = []\n",
    "for item in train_data['release_date']:\n",
    "    train_date.append( datetime.strptime(str(item), '%Y%m%d').strftime('%Y-%m-%d'))\n",
    "    \n",
    "test_date = []\n",
    "for item in test_data['release_date']:\n",
    "    test_date.append( datetime.strptime(str(item), '%Y%m%d').strftime('%Y-%m-%d'))\n",
    "    \n",
    "song_release_date = pd.Series(train_date)\n",
    "train_data['song_release'] = song_release_date\n",
    "\n",
    "song_release_date = pd.Series(test_date)\n",
    "test_data['song_release'] = song_release_date    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Finding difference between release date and listen date\n",
    "def date_diff(a,b):\n",
    "    diff = (datetime.strptime(a,\"%Y-%m-%d\") - datetime.strptime(b,\"%Y-%m-%d\")).days\n",
    "    return(diff)\n",
    "    \n",
    "train_data['song_release_days'] = train_data.apply(lambda row : date_diff(row['listened_date'],row['song_release']),axis=1)\n",
    "test_data['song_release_days'] = test_data.apply(lambda row : date_diff(row['listened_date'],row['song_release']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Extracting hour from listened_time\n",
    "def get_hour(a):\n",
    "    h = (datetime.strptime(a,\"%H:%M:%S\")).hour\n",
    "    return(h)\n",
    "    \n",
    "train_data['listened_hour'] = train_data.apply(lambda row : get_hour(row['listened_time']),axis=1)\n",
    "test_data['listened_hour'] = test_data.apply(lambda row : get_hour(row['listened_time']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Extracting year from listened_date\n",
    "def get_year(a):\n",
    "    y = (datetime.strptime(a,\"%Y-%m-%d\")).year\n",
    "    return(y)\n",
    "    \n",
    "train_data['listened_year'] = train_data.apply(lambda row : get_year(row['listened_date']),axis=1)\n",
    "test_data['listened_year'] = test_data.apply(lambda row : get_year(row['listened_date']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Dropping the not required fields\n",
    "train_data = train_data.drop(['ts_listen','listened_time','release_date','listened_date'],1)\n",
    "test_data = test_data.drop(['ts_listen','listened_time','release_date','listened_date'],1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Allocating User Count\n",
    "user_count = train_data.groupby(\"user_id\").agg({ \"user_id\" : pd.Series.count})\n",
    "\n",
    "def allot(id):\n",
    "    if id not in user_count.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = user_count.loc[id]\n",
    "    return(count)\n",
    "\n",
    "train_data['user_count'] = train_data.apply(lambda row : allot(row['user_id']),axis=1)\n",
    "test_data['user_count'] = test_data.apply(lambda row : allot(row['user_id']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Allocating Unique Genre\n",
    "unique_genre = train_data.groupby(\"user_id\").agg({ \"genre_id\" : pd.Series.nunique})\n",
    "\n",
    "def allot_genre(id):\n",
    "    if id not in unique_genre.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = unique_genre.loc[id]\n",
    "    return(count)\n",
    "\n",
    "train_data['unique_genre'] = train_data.apply(lambda row : allot_genre(row['user_id']),axis=1)\n",
    "test_data['unique_genre'] = test_data.apply(lambda row : allot_genre(row['user_id']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Finding User's genre preference\n",
    "genre = train_data[['genre_id','user_id','media_id']].groupby(['user_id','genre_id']).agg('count').reset_index()\n",
    "genre_p = genre[['user_id','genre_id','media_id']].sort_values(by='media_id', ascending=False)\n",
    "user_genre_preference = genre_p.groupby(['user_id']).head(1)\n",
    "genre_preference_count = user_genre_preference.sort_values(by='user_id').reset_index()\n",
    "#print(genre_preference_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Alloting user's genre preference\n",
    "def preferred_genre(id):\n",
    "    if id not in genre_preference_count.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = genre_preference_count.loc[id]['genre_id']\n",
    "    return (count)\n",
    "\n",
    "train_data['preferred_genre'] = train_data.apply(lambda x : preferred_genre(x['user_id']),axis=1)\n",
    "test_data['preferred_genre'] = test_data.apply(lambda x : preferred_genre(x['user_id']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Finding User's artist preference\n",
    "artist = train_data[['artist_id','user_id','media_id']].groupby(['user_id','artist_id']).agg('count').reset_index()\n",
    "artist_p = artist[['user_id','artist_id','media_id']].sort_values(by='media_id', ascending=False)\n",
    "#print(artist_p)\n",
    "user_artist_preference = artist_p.groupby(['user_id']).head(1)\n",
    "artist_preference_count = user_artist_preference.sort_values(by='user_id').reset_index()\n",
    "#print(artist_preference_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Alloting user's artist preference\n",
    "def preferred_artist(id):\n",
    "    if id not in artist_preference_count.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = artist_preference_count.loc[id]['artist_id']\n",
    "    return (count)\n",
    "\n",
    "train_data['preferred_artist'] = train_data.apply(lambda x : preferred_artist(x['user_id']),axis=1)\n",
    "test_data['preferred_artist'] = test_data.apply(lambda x : preferred_artist(x['user_id']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Finding User's platform preference\n",
    "platform = train_data[['platform_family','user_id','media_id']].groupby(['user_id','platform_family']).agg('count').reset_index()\n",
    "platform_p = platform[['user_id','platform_family','media_id']].sort_values(by='media_id', ascending=False)\n",
    "user_platform_preference = platform_p.groupby(['user_id']).head(1)\n",
    "platform_preference_count = user_platform_preference.sort_values(by='user_id').reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Alloting user's platform preference\n",
    "def preferred_platform(id):\n",
    "    if id not in platform_preference_count.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = platform_preference_count.loc[id]['platform_family']\n",
    "    return (count)\n",
    "\n",
    "train_data['preferred_platform'] = train_data.apply(lambda x : preferred_platform(x['user_id']),axis=1)\n",
    "test_data['preferred_platform'] = test_data.apply(lambda x : preferred_platform(x['user_id']),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Finding each user's listening count\n",
    "listened_count = train_data.groupby(\"user_id\").agg({ \"is_listened\" : pd.Series.sum})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Alloting total songs listened by the user\n",
    "def l_count(id):\n",
    "    if id not in listened_count.index:\n",
    "        count = 0\n",
    "    else:\n",
    "        count = listened_count.loc[id]\n",
    "    return (count)\n",
    "\n",
    "train_data['listened_count'] = train_data.apply(lambda x : l_count(x['user_id']),axis=1)\n",
    "test_data['listened_count'] = test_data.apply(lambda x : l_count(x['user_id']),axis=1)\n",
    "cv['listened_count'] = cv.apply(lambda x : l_count(x['user_id']),axis=1)v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Preparing fields\n",
    "X_train = train_data.drop(['is_listened'],1)\n",
    "Y_train = train_data['is_listened']\n",
    "X_test = test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Applying model\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=30)\n",
    "model.fit(X_train,Y_train)\n",
    "\n",
    "log_prob = model.predict_proba(X_test) \n",
    "print(log_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_test['is_listened'] = log_prob[:,1]\n",
    "header = [\"ID\", \"is_listened\"]\n",
    "X_test.to_csv('output.csv', columns = header)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
